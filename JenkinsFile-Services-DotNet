pipeline {
    agent{
        label 'c-ado-isprd55'   
    }
	
	environment {
       DOTNET_CLI_HOME = "C:\\temp\\DOTNET_CLI_HOME\\"
       PATH = "${env.PATH};C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\;c:\\Windows\\System32;${env.WORKSPACE}\\Crefisa.NFC\\"
       MSBuildSDKsPath = "C:\\Program Files\\dotnet\\sdk\\2.2.110\\Sdks"
	   GIT = "git.dominio.com.br/Cobranca/COB.Cobranca/Robos/Site.IntegracaoCobProjuris.git"
	   msbuildtool = "true"
	   gerapacote = "true"
	   
	   solutionFile = "${env.WORKSPACE}\\Site.IntegracaoCobProjuris.sln"
	   projectFile = "${env.WORKSPACE}\\RoboIDP\\RoboIDP.csproj"
	   Pbxml = ""
	   App = "IntegracaoCobProjuris"
       DestinoBKP = "J:\\${env.App}"     /* Volume mapeado para bkp, Se for GMUD utilize a letra G:\, altere tb no step onde monta  */
       
       OutPutBuild = "${env.WORKSPACE}\\RoboIDP\\bin\\Release"			/* Diretorio da saida do build, configurado no .pbxml */
	   
	   Password = "" /*ID do usuario a ser utilizado na execucao dos comandos remoto*/
	   UserMount = "usr-jenkins"          /*ID do usuario a ser utilizado para montar os volumes remotos*/
       Publicador = "\\\\publicador\\gmuds\\Jenkins\\Backup"
       ServerHMG = "c-ado-sbhmg08"
       DirServer = "D\$\\robos\\Crefisa.IntegracaoCobProjuris"
	   
       
    }
	stages {
		stage('Git Checkout') {
			steps {
				script {
					checkout changelog: false,
						poll: false,
						scm: [$class: 'GitSCM', branches: [[name: "*/release"]], 
						doGenerateSubmoduleConfigurations: false, 
						extensions: [[$class: 'WipeWorkspace']], 
						gitTool: 'Git-Slave-Windows', 
						submoduleCfg: [], 
						userRemoteConfigs: [[credentialsId: '85b2b627-1050-45ce-9d54-4d85da324aa2', url: "http://root@${GIT}"]]
						]
						
						
				}
			}
		}
		stage('Build') {
			steps {
				script {
					if (msbuildtool == "true"){
						dir("C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\"){
							bat "msbuild.exe ${solutionFile} -p:Configuration=Release -p:DeployOnBuild=true"
							bat "msbuild.exe ${projectFile} -p:Configuration=Release -p:DeployOnBuild=true "
							bat "del ${OutPutBuild}\\*.config"
						}
					}
				}
			}
		}	
		stage('Gerar pacote') {
			steps {
				script {
					if (gerapacote == "true"){
						bat "d:\\Jenkins\\scripts\\GeradorPacotes.bat ${OutPutBuild}"
						bat "del ${OutPutBuild}\\pacotes.txt"
					}
				}	
			}
		}
		
		stage ('Deploy no Ambiente de HMG') {
			steps {
			    script {
					withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.UserMount}", usernameVariable: 'Password_USR', passwordVariable: 'Password_PSW']]) {
					/* MONTANDO OS VOLUMES PARA USO NO STEP */
					def stdout = bat(returnStdout: true, script: '''
						@echo OFF
						IF NOT EXIST J: (
							net use J: %Publicador% /user:%Password_USR% %Password_PSW%
						)
					''')
					println stdout
					
					/* FAZENDO DE BACKUP */
					/* Get-ChildItem -Path \\\\$env:ServerHMG\\$env:DirServer -Exclude Logs,Crefisa.Framework.Dados.dll,Oracle.ManagedDataAccess.dll | Compress-Archive -DestinationPath ("$env:DestinoBKP\\HMG\\$data\\ServiceTask.zip")*/
					def stdout1 = bat(label: 'Parando o IIS', returnStdout: true, script: '''
						iisreset %ServerHMG% /stop
						echo "IIS Parado"
					''')
					println stdout1
					def stdout2 = powershell(label: 'Fazendo Backup', returnStdout: true, script: '''
						
						$data=Get-Date -Uformat '%Y%m%d-%H%M'
						New-Item -Path $env:DestinoBKP\\HMG\\$data -ItemType "directory"
						Compress-Archive \\\\$env:ServerHMG\\$env:DirServer -DestinationPath ("$env:DestinoBKP\\HMG\\$data\\$env:App.zip")
                        if($?) {
                            Write-Output 'Backup do Ambiente HMG salvo no caminho abaixo:'
                            Write-Output $env:Publicador\\$env:App\\HMG\\$data
                        } else {
                            Write-Error 'Ocorreu algum erro ao tentar fazer o backup !'
							Invoke-command -computername "$env:ServerHMG" -scriptblock {iisreset /START}
							$LastExitCode = 1
							exit $LastExitCode
                        }
						
					''')
					println stdout2
					
					/* FAZENDO DEPLOY */
					
                    def stdout4 = powershell(label: 'Fazendo Deploy', returnStdout: true, script: '''
						Copy-Item -Path $env:OutPutBuild\\* -Destination \\\\$env:ServerHMG\\$env:DirServer -Recurse -Force
                        if($?) {
                            Write-Output 'Deploy do Ambiente ServerHMG1 realizado com sucesso!'
                        } else {
                            Write-Error 'Ocorreu algum erro ao tentar fazer o Deploy !'
							$LastExitCode = 1
							exit $LastExitCode
                        }
					''')
					println stdout4
					def stdout5 = bat(label: 'Parando o IIS', returnStdout: true, script: '''
						iisreset %ServerHMG% /start
						echo "IIS Parado"
					''')
					println stdout5
				
					}
				}  
			}
		}
	}
	/* Este step ira enviar e-mail para o usuario q acionou o job via merger e para o Andre*/
	post {
        always {
			emailext from: 'publicador@dominio.com.br',
			    to: "${env.gitlabUserEmail},andre.goncalves@dominio.com.br",
				subject: "Status of pipeline: ${currentBuild.fullDisplayName}",
				body: "${env.JOB_NAME} [${env.BUILD_NUMBER}] has result ${currentBuild.result}"
		}
		cleanup{
			deleteDir()
		}
    }
}
