pipeline {
    agent{
        label 'c-ado-isprd55'   
    }
	environment {
	   PATH = "c:\\Windows\\System32;C:\\Program Files\\nodejs;C:\\Program Files\\nodejs\\node_modules\\npm\\bin;C:\\Program Files (x86)\\Yarn\\bin"
	   APPDATA = "C:\\Users\\usr_Jekins\\AppData\\Roaming"
	   GIT = "git.dominio.com.br/Mobile/EMMB.Front/site-web.git"
	   BRANCH = "*/HMG"
	   App = "site-emprestimo-web"
	   build = "true"
	   gerapacote = "true"
	   
     DestinoBKP = "J:\\${env.App}" /* Aqui estara mapeado o Publicador, informar o nome do subdiretorio ex: U:\\siteWeb */
     OrigemBKP = ""  /* Aqui estara mapeado o Servidor Remoto ex: U:\\CobWeb  */
	   DestinoBuild = "${env.OrigemBKP}" /* Nao precisa alterar */
	   solutionFile = ""      /* Informar o nome da solution ex: ${env.WORKSPACE}\\site.sln */
       OutPutBuild = "${env.WORKSPACE}\\build"
	   Password = "11deca4b-2715-4058-8c0c-b96e209fe8b2" /*ID do usuario a ser utilizado na execucao dos comandos remoto*/
	   UserMount = "usr-jenkins" /*ID do usuario a ser utilizado para montar os volumes remotos*/
       Publicador = "\\\\publicador\\gmuds\\Jenkins\\Backup"
	   
       ServerHMG = "C-ADO-WSHMG31"
	   ServerHMG2 = "C-ADO-WSHMG32"
       DirServer = "c\$\\inetpub\\wwwroot\\site-emprestimo-web" /*Diretorio anterior o da aplicacao no server remoto ex: \\c\$\\inetpub\\wwwroot*/
       
    }
	stages {
        stage('Git Checkout') {
			steps {
				script {
					checkout changelog: false,
						poll: false,
						scm: [$class: 'GitSCM', branches: [[name: "${BRANCH}"]], 
						doGenerateSubmoduleConfigurations: false, 
						extensions: [[$class: 'WipeWorkspace']],
						gitTool: 'Git-Slave-Windows',
						submoduleCfg: [], 
						userRemoteConfigs: [[credentialsId: '85b2b627-1050-45ce-9d54-4d85da324aa2', url: "http://root@${GIT}"]]
						]
						
						
				}
			}
		}
		stage('Instalando dependencia') {
			steps {
				script {
					if (build == "true"){
					    bat "del build\\* /s /q"
						bat "npm install"
						
					}
				}
				
			}
		}
		stage ('Build HMG') {
			steps {
			    script {
					withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.UserMount}", usernameVariable: 'Password_USR', passwordVariable: 'Password_PSW']]) {
					/* Neste step o script em powershel busca uma strig no arquivo e altera o link para HMG para gerar build */
					def stdout = powershell(returnStdout: true, script: '''
						Write-Output 'Editando arquivo AxiosInstance.js para HMG'
						$ARQ = "$env:WORKSPACE\\src\\Components\\Api\\AxiosInstance.js"
						
						$DSV = "baseURL: 'http://localhost:6446',"
						$DSVCOM = "//baseURL: 'http://localhost:6446',"
						$HMGCOM = "//baseURL: 'https://api-site-h.local:442',"
						$HMG = "baseURL: 'https://api-site-h.local:442',"

						If (
							select-string -path "$ARQ" -pattern "$DSV") ` {
								(Get-Content $ARQ).replace("$DSV", "$DSVCOM") | Set-Content $ARQ}
						Else{"Arquivo nao localizado"}
						If (
							select-string -path "$ARQ" -pattern "$HMGCOM") ` {
								(Get-Content $ARQ).replace("$HMGCOM", "$HMG") | Set-Content $ARQ}
						
					''')
					println stdout
					
					/* Executando Build de HMG */
					
					bat "npm run build"
					/* Mapeia um volume remoto para fazer o backup*/
					def stdout1 = bat(returnStdout: true, script: '''
						@echo OFF
						IF NOT EXIST J: (
							net use J: %Publicador% /user:%Password_USR% %Password_PSW%
						)
					''')
					println stdout1
					
					/* FAZENDO DE BACKUP */
					/* Get-ChildItem -Path \\\\$env:ServerHMG\\$env:DirServer -Exclude Logs,Crefisa.Framework.Dados.dll,Oracle.ManagedDataAccess.dll | Compress-Archive -DestinationPath ("$env:DestinoBKP\\HMG\\$data\\ServiceTask.zip")*/
					def stdout2 = bat(label: 'Parando o IIS', returnStdout: true, script: '''
						iisreset %ServerHMG% /stop
						echo "IIS Parado"
					''')
					println stdout2
					def stdout3 = powershell(label: 'Fazendo Backup', returnStdout: true, script: '''
						
						$data=Get-Date -Uformat '%Y%m%d-%H%M'
						New-Item -Path $env:DestinoBKP\\HMG\\$data -ItemType "directory"
                        Get-ChildItem -Path \\\\$env:ServerHMG\\$env:DirServer -Exclude logs | Compress-Archive -DestinationPath ("$env:DestinoBKP\\HMG\\$data\\$env:App.zip")
						
						if($?) {
                            Write-Output 'Backup do Ambiente HMG salvo no caminho abaixo:'
                            Write-Output $env:Publicador\\$env:App\\HMG\\$data
                        } else {
                            Write-Error 'Ocorreu algum erro ao tentar fazer o backup !'
							Invoke-command -computername "$env:ServerHMG" -scriptblock {iisreset /START}
							$LastExitCode = 1
							exit $LastExitCode
                        }
					''')
					println stdout3
					
					/* FAZENDO DEPLOY */
					def stdout4 = powershell(label: 'Limpando o diretorio da app', returnStdout: true, script: '''
						Remove-Item -Path \\\\$env:ServerHMG\\$env:DirServer\\** -Recurse -Force
                        
					''')
					println stdout4
                    def stdout5 = powershell(label: 'Fazendo Deploy', returnStdout: true, script: '''
						Copy-Item -Path $env:OutPutBuild\\* -Destination \\\\$env:ServerHMG\\$env:DirServer -Recurse -Force
                        if($?) {
                            Write-Output "Deploy do Ambiente $env:ServerHMG\\$env:DirServer realizado com sucesso!"
                        } else {
                            Write-Error 'Ocorreu algum erro ao tentar fazer o Deploy !'
							$LastExitCode = 1
							exit $LastExitCode
                        }
												
						
					''')
					println stdout5
					def stdout6 = bat(label: 'Parando o IIS', returnStdout: true, script: '''
						iisreset %ServerHMG% /start
						echo "IIS Iniciado"
					''')
					println stdout6
					
					def stdout7 = bat(label: 'Parando o IIS', returnStdout: true, script: '''
						iisreset %ServerHMG2% /stop
						echo "IIS Parado"
					''')
					println stdout7
					
					def stdout8 = powershell(label: 'Limpando o diretorio da app', returnStdout: true, script: '''
						Remove-Item -Path \\\\$env:ServerHMG2\\$env:DirServer\\** -Recurse -Force
                        
					''')
					println stdout8
                    def stdout9 = powershell(label: 'Fazendo Deploy', returnStdout: true, script: '''
						Copy-Item -Path $env:OutPutBuild\\* -Destination \\\\$env:ServerHMG2\\$env:DirServer -Recurse -Force
                        if($?) {
                            Write-Output "Deploy do Ambiente $env:ServerHMG2\\$env:DirServer realizado com sucesso!"
                        } else {
                            Write-Error 'Ocorreu algum erro ao tentar fazer o Deploy !'
							$LastExitCode = 1
							exit $LastExitCode
                        }
												
						
					''')
					println stdout9
					def stdout10 = bat(label: 'Iniciando o IIS', returnStdout: true, script: '''
						iisreset %ServerHMG2% /start
						echo "IIS Iniciado"
					''')
					println stdout10
					
					
					}
				}
			}
		}
		stage ('Build PRD e Gera pacote') {
			steps {
			    script {
					withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.UserMount}", usernameVariable: 'Password_USR', passwordVariable: 'Password_PSW']]) {
					/* Neste step o script em powershel busca uma strig no arquivo e altera o link para PRD para gerar build */
					def stdout = powershell(returnStdout: true, script: '''
						Write-Output 'Editando arquivo AxiosInstance.js para PRD para gerar pacote'
						$ARQ = "$env:WORKSPACE\\src\\Components\\Api\\AxiosInstance.js"
						
						$HMGCOM = "//baseURL: 'https://api-site-h.local:442',"
						$HMG = "baseURL: 'https://api-site-h.local:442',"
						$PRDCOM = "//baseURL: 'https://api-site-h.local:442',"
						$PRD = "baseURL: 'https://api-site-h.local:442',"

						If (
							select-string -path "$ARQ" -pattern "$HMG") ` {
								(Get-Content $ARQ).replace("$HMG", "$HMGCOM") | Set-Content $ARQ}
						Else{"Arquivo nao localizado"}
						If (
							select-string -path "$ARQ" -pattern "$PRDCOM") ` {
								(Get-Content $ARQ).replace("$PRDCOM", "$PRD") | Set-Content $ARQ}
						
					''')
					println stdout
					bat "npm run build"
          /* aqui e utilizado um script que esta no server do jenkins que cria um pasta com numeracao sequencial e copia o artefato para la */
					if (gerapacote == "true"){
						bat "d:\\Jenkins\\scripts\\GeradorPacotes.bat ${OutPutBuild}"
					}
					}
				}
			}
		}
	    		
	}
	/* Este step ira enviar e-mail para o usuario q acionou o job via merger e o cleanup limpara o workspace apos execucao*/
	post {
        always {
			emailext from: 'publicador@dominio.com.br',
			    to: "${env.gitlabUserEmail}",
				subject: "Status of pipeline: ${currentBuild.fullDisplayName}",
				body: "${env.JOB_NAME} [${env.BUILD_NUMBER}] has result ${currentBuild.result}"
		}
		cleanup{
			deleteDir()
		}
    }
}
